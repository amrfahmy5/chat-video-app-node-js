import { NextFunction, Request, Response } from 'express';
/**
 * WARNING: public API. If this interface changes, then it is a BREAKING change (bump module major version).
 */
export declare class NormalizedException {
    readonly statusCode: number;
    readonly name: string;
    readonly message: string;
    readonly stack?: any;
    constructor(statusCode: number, name: string, message: string, stack?: any);
    get status(): number;
    toString(): string;
}
/**
 * Loose type to define interesting properties we may find in errors we get
 */
declare type IReceivedError = Partial<Error> & string & {
    statusCode?: number | string;
    code?: number | string;
    status?: number | string;
};
interface ErrorArg {
    message: string;
    name?: string;
    status?: number;
}
interface ErrorReporterOptions {
    links: Array<((error: ErrorArg) => string)>;
}
/**
 * An express-compatible middleware to catch all errors.
 *
 * Use like this:
 *
   ```ts
   import { errorReporter } from 'express-youch';

   app.use(errorReporter());
   ```
 */
export declare function errorReporter(options?: Partial<ErrorReporterOptions>): (err: IReceivedError, req: Request, res: Response, next: NextFunction) => void;
export {};
